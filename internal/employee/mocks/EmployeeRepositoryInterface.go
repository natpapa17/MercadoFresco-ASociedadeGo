// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	employee "github.com/natpapa17/MercadoFresco-ASociedadeGo/internal/employee"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepositoryInterface is an autogenerated mock type for the EmployeeRepositoryInterface type
type EmployeeRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: cardNumberId, firstName, lastName, wareHouseId
func (_m *EmployeeRepositoryInterface) Create(cardNumberId int, firstName string, lastName string, wareHouseId int) (employee.Employee, error) {
	ret := _m.Called(cardNumberId, firstName, lastName, wareHouseId)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int, string, string, int) employee.Employee); ok {
		r0 = rf(cardNumberId, firstName, lastName, wareHouseId)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, int) error); ok {
		r1 = rf(cardNumberId, firstName, lastName, wareHouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *EmployeeRepositoryInterface) DeleteById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *EmployeeRepositoryInterface) GetAll() ([]employee.Employee, error) {
	ret := _m.Called()

	var r0 []employee.Employee
	if rf, ok := ret.Get(0).(func() []employee.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employee.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCardNumberId provides a mock function with given fields: cardNumberId
func (_m *EmployeeRepositoryInterface) GetByCardNumberId(cardNumberId int) (employee.Employee, error) {
	ret := _m.Called(cardNumberId)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int) employee.Employee); ok {
		r0 = rf(cardNumberId)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cardNumberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *EmployeeRepositoryInterface) GetById(id int) (employee.Employee, error) {
	ret := _m.Called(id)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int) employee.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, cardNumberId, firstName, lastName, wareHouseId
func (_m *EmployeeRepositoryInterface) UpdateById(id int, cardNumberId int, firstName string, lastName string, wareHouseId int) (employee.Employee, error) {
	ret := _m.Called(id, cardNumberId, firstName, lastName, wareHouseId)

	var r0 employee.Employee
	if rf, ok := ret.Get(0).(func(int, int, string, string, int) employee.Employee); ok {
		r0 = rf(id, cardNumberId, firstName, lastName, wareHouseId)
	} else {
		r0 = ret.Get(0).(employee.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, int) error); ok {
		r1 = rf(id, cardNumberId, firstName, lastName, wareHouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEmployeeRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmployeeRepositoryInterface creates a new instance of EmployeeRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmployeeRepositoryInterface(t mockConstructorTestingTNewEmployeeRepositoryInterface) *EmployeeRepositoryInterface {
	mock := &EmployeeRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
