// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/natpapa17/MercadoFresco-ASociedadeGo/internal/carriers/domain"
	mock "github.com/stretchr/testify/mock"
)

// CarrierRepository is an autogenerated mock type for the CarrierRepository type
type CarrierRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: cid, companyName, address, telephone, localityId
func (_m *CarrierRepository) Create(cid string, companyName string, address string, telephone string, localityId int) (domain.Carrier, error) {
	ret := _m.Called(cid, companyName, address, telephone, localityId)

	var r0 domain.Carrier
	if rf, ok := ret.Get(0).(func(string, string, string, string, int) domain.Carrier); ok {
		r0 = rf(cid, companyName, address, telephone, localityId)
	} else {
		r0 = ret.Get(0).(domain.Carrier)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int) error); ok {
		r1 = rf(cid, companyName, address, telephone, localityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCid provides a mock function with given fields: cid
func (_m *CarrierRepository) GetByCid(cid string) (domain.Carrier, error) {
	ret := _m.Called(cid)

	var r0 domain.Carrier
	if rf, ok := ret.Get(0).(func(string) domain.Carrier); ok {
		r0 = rf(cid)
	} else {
		r0 = ret.Get(0).(domain.Carrier)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfCarriersPerLocality provides a mock function with given fields: localityId
func (_m *CarrierRepository) GetNumberOfCarriersPerLocality(localityId int) (int, error) {
	ret := _m.Called(localityId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(localityId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(localityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCarrierRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarrierRepository creates a new instance of CarrierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarrierRepository(t mockConstructorTestingTNewCarrierRepository) *CarrierRepository {
	mock := &CarrierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
