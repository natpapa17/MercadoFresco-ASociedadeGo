// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/natpapa17/MercadoFresco-ASociedadeGo/internal/warehouses/domain"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: warehouseCode, address, telephone, minimumCapacity, minimumTemperature
func (_m *Service) Create(warehouseCode string, address string, telephone string, minimumCapacity int, minimumTemperature float64) (domain.Warehouse, error) {
	ret := _m.Called(warehouseCode, address, telephone, minimumCapacity, minimumTemperature)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(string, string, string, int, float64) domain.Warehouse); ok {
		r0 = rf(warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, float64) error); ok {
		r1 = rf(warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *Service) DeleteById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() (domain.Warehouses, error) {
	ret := _m.Called()

	var r0 domain.Warehouses
	if rf, ok := ret.Get(0).(func() domain.Warehouses); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Warehouses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *Service) GetById(id int) (domain.Warehouse, error) {
	ret := _m.Called(id)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(int) domain.Warehouse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, warehouseCode, address, telephone, minimumCapacity, minimumTemperature
func (_m *Service) UpdateById(id int, warehouseCode string, address string, telephone string, minimumCapacity int, minimumTemperature float64) (domain.Warehouse, error) {
	ret := _m.Called(id, warehouseCode, address, telephone, minimumCapacity, minimumTemperature)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(int, string, string, string, int, float64) domain.Warehouse); ok {
		r0 = rf(id, warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, int, float64) error); ok {
		r1 = rf(id, warehouseCode, address, telephone, minimumCapacity, minimumTemperature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
